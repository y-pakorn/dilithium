[package]
name = "pqc_dilithium"
version = "0.2.0"
authors = ["Mitchell Berry <foss@mitchellberry.com>"]
description = "A post-quantum cryptographic signature scheme based on the hardness of lattice problems over module lattices"
edition = "2018"
categories = ["cryptography"]
keywords = ["signature", "post-quantum", "signing"]
repository = "https://github.com/Argyle-Software/dilithium/"
license = "MIT OR Apache-2.0"
exclude = ["tests/KAT"]
rust-version = "1.50"

[dependencies]
rand_core = { version = "0.6.4",  default-features = false }
getrandom = {version = "0.2.10", features = ["js"], optional = true }
wasm-bindgen = { version = "0.2.87", optional = true }
tiny-keccak = { version = "2.0.2", features = ["keccak"] }

[dependencies.rand]
version = "0.8.5"
features = ["getrandom"]

[dev-dependencies]
pqc_core = {version = "0.3.0", features = ["load"]}
hex = "0.4.3"

[features]
# Produces a random signature everytime when signing the same message.
# One may want to consider randomized signatures in situations where the side channel
# attacks exploiting determinism are applicable. Another situation
# where one may want to avoid determinism is when the signer does not wish to reveal the
# message that is being signed.
random_signing = []

# For compiling to wasm targets 
wasm = ["wasm-bindgen", "getrandom/js"]

[lib]
crate-type = ["cdylib", "rlib"]
